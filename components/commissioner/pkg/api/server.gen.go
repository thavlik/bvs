// Code generated by oto; DO NOT EDIT.

package api

import (
	"context"
	"log"
	"net/http"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"

	"github.com/pacedotdev/oto/otohttp"
)

var (
	commissionerCastVoteTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "commissioner_cast_vote_total",
		Help: "Auto-generated metric incremented on every call to Commissioner.CastVote",
	})
	commissionerCastVoteSuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "commissioner_cast_vote_success_total",
		Help: "Auto-generated metric incremented on every call to Commissioner.CastVote that does not return with an error",
	})

	commissionerCreateElectionTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "commissioner_create_election_total",
		Help: "Auto-generated metric incremented on every call to Commissioner.CreateElection",
	})
	commissionerCreateElectionSuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "commissioner_create_election_success_total",
		Help: "Auto-generated metric incremented on every call to Commissioner.CreateElection that does not return with an error",
	})

	commissionerCreateMinterTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "commissioner_create_minter_total",
		Help: "Auto-generated metric incremented on every call to Commissioner.CreateMinter",
	})
	commissionerCreateMinterSuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "commissioner_create_minter_success_total",
		Help: "Auto-generated metric incremented on every call to Commissioner.CreateMinter that does not return with an error",
	})

	commissionerCreateVoterTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "commissioner_create_voter_total",
		Help: "Auto-generated metric incremented on every call to Commissioner.CreateVoter",
	})
	commissionerCreateVoterSuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "commissioner_create_voter_success_total",
		Help: "Auto-generated metric incremented on every call to Commissioner.CreateVoter that does not return with an error",
	})

	commissionerMintVoteTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "commissioner_mint_vote_total",
		Help: "Auto-generated metric incremented on every call to Commissioner.MintVote",
	})
	commissionerMintVoteSuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "commissioner_mint_vote_success_total",
		Help: "Auto-generated metric incremented on every call to Commissioner.MintVote that does not return with an error",
	})

	commissionerQueryAddressTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "commissioner_query_address_total",
		Help: "Auto-generated metric incremented on every call to Commissioner.QueryAddress",
	})
	commissionerQueryAddressSuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "commissioner_query_address_success_total",
		Help: "Auto-generated metric incremented on every call to Commissioner.QueryAddress that does not return with an error",
	})
)

type Commissioner interface {
	CastVote(context.Context, CastVoteRequest) (*CastVoteResponse, error)
	CreateElection(context.Context, CreateElectionRequest) (*CreateElectionResponse, error)
	CreateMinter(context.Context, CreateMinterRequest) (*CreateMinterResponse, error)
	CreateVoter(context.Context, CreateVoterRequest) (*CreateVoterResponse, error)
	MintVote(context.Context, MintVoteRequest) (*MintVoteResponse, error)
	QueryAddress(context.Context, QueryAddressRequest) (*QueryAddressResponse, error)
}

type commissionerServer struct {
	server       *otohttp.Server
	commissioner Commissioner
}

func RegisterCommissioner(server *otohttp.Server, commissioner Commissioner) {
	handler := &commissionerServer{
		server:       server,
		commissioner: commissioner,
	}
	server.Register("Commissioner", "CastVote", handler.handleCastVote)
	server.Register("Commissioner", "CreateElection", handler.handleCreateElection)
	server.Register("Commissioner", "CreateMinter", handler.handleCreateMinter)
	server.Register("Commissioner", "CreateVoter", handler.handleCreateVoter)
	server.Register("Commissioner", "MintVote", handler.handleMintVote)
	server.Register("Commissioner", "QueryAddress", handler.handleQueryAddress)
}

func (s *commissionerServer) handleCastVote(w http.ResponseWriter, r *http.Request) {
	commissionerCastVoteTotal.Inc()
	var request CastVoteRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.commissioner.CastVote(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	commissionerCastVoteSuccessTotal.Inc()
}

func (s *commissionerServer) handleCreateElection(w http.ResponseWriter, r *http.Request) {
	commissionerCreateElectionTotal.Inc()
	var request CreateElectionRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.commissioner.CreateElection(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	commissionerCreateElectionSuccessTotal.Inc()
}

func (s *commissionerServer) handleCreateMinter(w http.ResponseWriter, r *http.Request) {
	commissionerCreateMinterTotal.Inc()
	var request CreateMinterRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.commissioner.CreateMinter(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	commissionerCreateMinterSuccessTotal.Inc()
}

func (s *commissionerServer) handleCreateVoter(w http.ResponseWriter, r *http.Request) {
	commissionerCreateVoterTotal.Inc()
	var request CreateVoterRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.commissioner.CreateVoter(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	commissionerCreateVoterSuccessTotal.Inc()
}

func (s *commissionerServer) handleMintVote(w http.ResponseWriter, r *http.Request) {
	commissionerMintVoteTotal.Inc()
	var request MintVoteRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.commissioner.MintVote(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	commissionerMintVoteSuccessTotal.Inc()
}

func (s *commissionerServer) handleQueryAddress(w http.ResponseWriter, r *http.Request) {
	commissionerQueryAddressTotal.Inc()
	var request QueryAddressRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.commissioner.QueryAddress(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	commissionerQueryAddressSuccessTotal.Inc()
}

type Key struct {
	Type        string `json:"type"`
	Description string `json:"description"`
	CborHex     string `json:"cborHex"`
}

type CastVoteRequest struct {
	Election   string `json:"election"`
	Voter      string `json:"voter"`
	SigningKey Key    `json:"signingKey"`
	Candidate  string `json:"candidate"`
}

type CastVoteResponse struct {
	ID    string `json:"id"`
	Error string `json:"error,omitempty"`
}

type CreateElectionRequest struct {
}

type CreateElectionResponse struct {
	ID              string `json:"id"`
	PolicyID        string `json:"policyID"`
	VerificationKey Key    `json:"verificationKey"`
	Error           string `json:"error,omitempty"`
}

type CreateMinterRequest struct {
	SigningKey      Key    `json:"signingKey"`
	VerificationKey Key    `json:"verificationKey"`
	Address         string `json:"address"`
}

type CreateMinterResponse struct {
	ID    string `json:"id"`
	Error string `json:"error,omitempty"`
}

type CreateVoterRequest struct {
}

type CreateVoterResponse struct {
	SigningKey      Key    `json:"signingKey"`
	VerificationKey Key    `json:"verificationKey"`
	Address         string `json:"address"`
	Error           string `json:"error,omitempty"`
}

type MintVoteRequest struct {
	Election string `json:"election"`
	Voter    string `json:"voter"`
	Minter   string `json:"minter"`
}

type MintVoteResponse struct {
	ID    string `json:"id"`
	Asset string `json:"asset"`
	Error string `json:"error,omitempty"`
}

type QueryAddressRequest struct {
	Address string `json:"address"`
}

type QueryAddressResponse struct {
	UnspentTransactions []*UnspentTransaction `json:"unspentTransactions"`
	Error               string                `json:"error,omitempty"`
}

type UnspentTransaction struct {
	TxHash   string `json:"txHash"`
	TxIx     int    `json:"txIx"`
	Lovelace int    `json:"lovelace"`
	Balance  string `json:"balance"`
}
