// Code generated by oto; DO NOT EDIT.

package api

import (
	"context"
	"log"
	"net/http"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"

	"github.com/pacedotdev/oto/otohttp"
)

var (
	nodeProbeReadyTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "node_probe_ready_total",
		Help: "Auto-generated metric incremented on every call to Node.ProbeReady",
	})
	nodeProbeReadySuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "node_probe_ready_success_total",
		Help: "Auto-generated metric incremented on every call to Node.ProbeReady that does not return with an error",
	})
)

type Node interface {
	ProbeReady(context.Context, ProbeReadyRequest) (*ProbeReadyResponse, error)
}

type nodeServer struct {
	server *otohttp.Server
	node   Node
}

func RegisterNode(server *otohttp.Server, node Node) {
	handler := &nodeServer{
		server: server,
		node:   node,
	}
	server.Register("Node", "ProbeReady", handler.handleProbeReady)
}

func (s *nodeServer) handleProbeReady(w http.ResponseWriter, r *http.Request) {
	nodeProbeReadyTotal.Inc()
	var request ProbeReadyRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.node.ProbeReady(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	nodeProbeReadySuccessTotal.Inc()
}

type ProbeReadyRequest struct {
}

type ProbeReadyResponse struct {
	IsReady bool   `json:"isReady"`
	Error   string `json:"error,omitempty"`
}
